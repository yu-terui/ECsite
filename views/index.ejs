<!DOCTYPE html>
<html lang="ja">
    <head>
        <meta charset="UTF-8">
        <title>review</title>
        <link type="text/css" rel="stylesheet" href="css/style.css">
    </head>
    <body>
        <div class="container">
            <h1>商品レビュー</h1>
            <section>
                <form action="/" method="post">
                    <h2>レビューを投稿する</h2>
                    <div class="wrap">
                        <label for="username">ユーザー名</label><input type="text" id="username" name="username">
                    </div>
                    <div class="wrap">
                        <label for="age">年齢</label><input type="text" id="age" name="age">
                    </div>
                    <div class="wrap">
                        <label for="rating">評価</label><input type="text" id="rating" name="rating">
                    </div>
                    <div class="wrap">
                        <label for="reason">評価内容</label><textarea name="reason" id="reason" cols="30" rows="5"></textarea>
                    </div>
                    <button type="submit" id="submitBtn">投稿</button>
                </form>
            </section>
            <section>
                <div id="graph_wrap">
                    <p>年代別グラフ</p>
                    <div id="graph">
                    </div>
                </div>
            </section>
            <section>
                <div class="wrap">
                        <select name="evaluation_sort" id="evaluation_sort">
                            <option value="" selected disabled>評価順</option>
                            <option value="base"
                            <% if (order === "base") { %> selected <% } %>> 標準</option>
                            <option value="rating:desc" <% if (order === "desc") { %> selected <% } %>> 評価の高い順</option>
                            <option value="rating:asc"  <% if (order === "asc") { %> selected <% } %>> 評価の低い順</option>
                        </select>
                    <select name="evaluation_search" id="evaluation_search">
                        <option value="" selected disabled>評価値で絞る</option>
                        <option value="base"<% if (search === "base") { %> selected <% } %>>標準</option>
                        <option value="rating:5" <% if (search === "5") { %> selected <% } %>>評価： 5</option>
                        <option value="rating:4" <% if (search === "4") { %> selected <% } %>>評価： 4</option>
                        <option value="rating:3" <% if (search === "3") { %> selected <% } %>>評価： 3</option>
                        <option value="rating:2" <% if (search === "2") { %> selected <% } %>>評価： 2</option>
                        <option value="rating:1" <% if (search === "1") { %> selected <% } %>>評価： 1</option>
                    </select>
                </div>
            </section>
            <section>
                <table id="reviewArea"></table>
            </section>
        </div>
        <script type="text/javascript">
            const filteredPersonas = JSON.parse('<%= JSON.stringify(filteredPersonas) %>'.replace(/&#34;/g, '"'));
            const reviewArea = document.querySelector("#reviewArea")
            let evaluation_sort = document.querySelector("#evaluation_sort");
            let evaluation_search = document.querySelector("#evaluation_search");

            // ページ読み込み時は初期値を出力
            window.onload = () => {
                createTableData(filteredPersonas);
            };
            //新規追加機能・空白チェック
            let username = document.getElementById("username");
            let age = document.getElementById("age");
            let rating = document.getElementById("rating");
            let reason = document.getElementById("reason");
            let submitBtn = document.getElementById("submitBtn");
            submitBtn.addEventListener("click", function () {
                if (
                    username.value === "" |
                    age.value === "" |
                    rating.value === "" |
                    reason.value === ""
                ) {
                    alert('すべての項目を入力してください')
                    event.preventDefault();
                }
            });
            //年代別グラフ
            age20s = filteredPersonas.filter(ages => ages.age >= 20 && ages.age < 30);
            age30s = filteredPersonas.filter(ages => ages.age >= 30 && ages.age < 40);
            age40s = filteredPersonas.filter(ages => ages.age >= 40);
            let graph = document.getElementById("graph");
                //リスト追加
                let p = `<p id="graph1">`;
                p += `20代：<br>${age20s.length}人</p>
                <p id="graph2">30代：<br>${age30s.length}人</p>
                <p id="graph3">40代：<br>${age40s.length}人</p>`;
                graph.insertAdjacentHTML("beforeend", p);
            //評価・ソート機能
            //評価・絞り込み機能
            evaluation_sort.addEventListener('change',sortAndSearch)
            evaluation_search.addEventListener('change',sortAndSearch)
            //ソートor絞り込みを選択した際のメソッド
            function sortAndSearch(){
                let res = ""
                let filterObj = []
                //ソートの値
                let order = ""
                //絞り込みの値
                let search = ""
                //ソートに選択された値を検索
                    for(option of evaluation_sort.options){
                        if(option.selected && option.value !==""){
                            filterObj["order"] = option.value
                        }
                    }
                //絞り込みに選択された値を検索
                    for(option of evaluation_search.options){
                        if(option.selected && option.value !==""){
                            filterObj["search"] = option.value
                        }
                    }
                //order = rating:asc／search = rating:1のような形に
                const filterArray = Object.keys(filterObj).map(function (key) {
                    return [`${key} = ${filterObj[key]}`];
                    });
                    // 複数あれば、「order=asc+search=1」のような形に変換、なければカンマ削除
                    //→ filterObjの中に、ソートと絞り込みの配列が一緒に入っている状態なので、joinで形状を変える
                filterArray.length > 1 ?
                res = filterArray.join("+") :
                res = filterArray.join("")
                //ソートしたユーザー情報でindexをレンダリング
                    console.log(res);
                    location.assign(`/${res}`)
            }
            // ブラウザに出力するデータを作成するメソッド
                // personasObj...ブラウザ出力するデータ群
                function createTableData(personasObj) {
                //デフォルトをリセット
                while(reviewArea.firstChild) {
                    reviewArea.firstChild.remove()
                }
                // 渡されたオブジェクトの分だけリストデータの作成
                personasObj.map((person) => {
                    // ユーザー情報表示領域の作成
                    const reviewContent    = document.createElement("div")
                    //1行目
                    const rating           = document.createElement("tr")
                    //２行目
                    const nameAndAge = document.createElement("tr")
                    //３行目
                    const reason        = document.createElement("tr")
                    //４行目
                    const editBtn        = document.createElement("tr")
                    // 各要素へ属性の付与
                    reviewContent.classList.add("review-content")
                    rating.classList.add("rating","tr1")
                    nameAndAge.classList.add("nameAndAge")
                    reason.classList.add("reason")
                    editBtn.classList.add("editBtn", "tr4")
                    // ユーザーの名前と年齢を受け取る
                    rating.innerHTML           = `<td>評価：${person.rating}</td>`
                    nameAndAge.innerHTML = `<td>${person.username}さん<span>(${person.age}歳)</span></td>`
                    reason.innerHTML           = `<td>${person.reason}</td>`
                    editBtn.innerHTML           = `<td id="updateBtn"><a href="/edit/<%= filteredPersonas[0].id %>">更新</a></td>`
                    // ユーザー情報表示領域の完成
                    reviewContent.append(rating)
                    reviewContent.append(nameAndAge)
                    reviewContent.append(reason)
                    reviewContent.append(editBtn)

                    // 改行を含む文字列の場合、改行コードをbrタグに変換する
                    if(person.reason.match("\n") !== null ) {
                        person.reason = person.reason.replace(/\n/g, "<br>")
                    }
                    reason.innerHTML = person.reason
                    // ブラウザへ出力
                    reviewArea.append(reviewContent)
                });
            };
        </script>
    </body>
</html>
